1.线性的文本处理工具
	可以在文本数据进行字段分割和重组
	默认是以空格或者连续空格作为分割符号
	a.获取本机的IP地址
		ifconfig eth0 |grep Bcast | awk -F " " '{ print $2}' |awk -F ":" '{ print $2}'
	b.打印所有行
		awk '{ print }' /etc/passwd
	c.打印第一列
		查看系统中有哪些用户
		awk -F ":" '{ print $1 }' /etc/passwd
	d.打印多列
		awk -F ":" '{ print $1,$3 }' /etc/passwd
		awk -F ":" '{ print $1":"$3 }' /etc/passwd
	e.把所有通过ssh登录失败的IP打印出来
		lastb -ai | grep ssh |awk  '{print $10}' |uniq -c
		lastb -i   登录失败信息
		uniq -c    去重计算数量
	f.打印每行的最后一列
		$NF   最后一列
		awk -F ":" '{ print $NF }' /etc/passwd
		/bin/bash               用户可以登录系统进行操作
		/sbin/nologin           用户可以在系统中运行程序，但是不能登录系统
	g.打印每行的字段数(每行多少个列)
		NF    列的数量
		 awk -F ":" '{ print NF }' passwd
	h.运算操作符号
		+
		-
		*
		/
		%
		^
		++
		--
		echo  |awk '{ print 2^3}'
	i.awk的关系操作符
		==
		!=
		>=
		<=
		>
		<
	j.逻辑操作符
		&&   逻辑与
		||   逻辑或
		！   逻辑非
	k.打印行号
		awk -F ":" '{ print NR,$1}' /etc/passwd
		awk -F ":" 'NR==8{print}' passwd
		简单的条件判断
		NR代表行号
		虽然打印的是第八行，但是前7行，awk一样读取，只是没有打印
	l.打印字段数量大于3的行
		必须要加分割符号，列数才有意义
		awk -F ":" 'NF>3{print}' passwd
	m.打印uid在10和20之间的用户名
		awk -F ":" '$3>=10&&$3<=20{print}' passwd
	n.隔行删除(隔行打印)
		awk 'NR%2==0{print }' passwd
	o.练习
		a.终端设置(.bashrc)
		1.当前用户为  	xxx
		2.当前IP为   	xxx
		3.当前主机名为 	xxx
			
		b.系统情况报告
		1.cpu用户使用率超过80%(vmstat us对应数据)
		2.内存使用率超过80%(free)
			内存总量
				free |grep Mem |awk -F " " '{ print $2}'
			已用数量
				free |grep Mem |awk -F " " '{ print $3}'
			内存使用率
				echo "scale=2;$b/$a" |bc |awk -F "." '{ print $2}'
		3.硬盘使用率超过80%(df)
			df -h | grep /$ |awk -F " " '{ print $4}'|awk -F "%" '{print $1}'

		4.超过极限在所有终端报警(wall)
			wall 群发信息给当前登录的所有用户
	p.awk进阶
		awk -F ":" 'BEGIN{处理文件前的代码块}{处理文件过程中的代码块}END{处理文件后执行的代码块}'
		1.输出内容顶部增加 come on ，输出最后增加 get out
			awk -F ":" 'BEGIN{ print "come on "}{ print }END{print "get out"}' passwd
		2.打印最后一行的最后一列
			awk -F ":" 'END{ print $NF}' passwd
		3.打印文件字段总和
			awk -F ":" 'BEGIN{count=0}{count+=NF}END{print count } ' passwd
		4.打印字段数大于4的总行数
			 awk -F ":" 'BEGIN{count=0}NF>4{ count++ }END{ print count }' passwd
		5.awk代码写入到独立的文件中
			01.awk
			BEGIN{
			        FS=":"
			        count=0
			}
			{
			        if( NF>4 )
			        {
			                count++
			        }
			}
			END{
			        print count
			}
			awk -f 01.awk passwd
		6.awk函数调用
			awk有很多内置函数
				print("参数")  打印完毕后自动换行
				printf(参数列表) 格式化，定义格式，转义等等
				printf("%d--%s\n",12,'heygor')
				echo  |awk '{ printf("%d--%s",100,'hey')}
		7.awk的循环
			for (i=0;i<10;i++)
			{
				printf("%d",i)
			}
			02.awk
			{
			for(i=0;i<10;i++)
			{
			        printf("%d",i)
			}
			}
			END{
			        print "over"
			}
			echo |awk -f 02.awk
		8.倒序排列所有字段
			test.txt
			1:2:3:4
			a:b:c:d:e
			处理后
			4:3:2:1
			e:d:c:b:a
			03.awk
			BEGIN{
			        FS=":"
			}
			{
			        for(i=NF;i>0;i--)
			        {
			                if( i>1 )
			                {
			                        printf("%s:",$i)
			                }
			                else{
			                        printf("%s\n",$i)
			                }
			        }
			}
			awk -f 03.awk ./test.txt

2.sed 字段编辑和字段替换
	1.删除指令(d)
		删除所有行   		sed -e 'd' passwd
		只删除第一行         sed -e '1d' passwd
		删除一到三行         sed -e '1,3d' passwd
		删除第一行和第三行    sed -e '1d;3d' passwd
		包含root关键的行删除  sed -e '/root/d' passwd
		删除daemon开头的行    sed -e '/^daemon/d' passwd 
		删除nologin结尾的行   sed -e '/nologin$/d' passwd
		删除空行              sed -e '/^$/d' passwd
		删除所有以#开头以及空行 sed -e '/^#/d;/^$/d' passwd
		删除以daemon开头的行到以shutdown结尾的行
			sed -e '/^daemon/,/shutdown$/d' passwd
	2.直接保存结果到源文件中
		sed -i '/^root/d' passwd
		在第1行前插入asdasdasdada  i
		sed -i '1i\asdasdasdada' passwd
		在第一行后插入asdasdasdada a
		sed -i '1a\asdasdasdada' passwd
		在第一行后插入多行 每一行末尾（除最后一行）添加\
		sed -i '1a\
		asdasdasdada\
		this is\
		qq' passwd
	3.打印（p）
		打印所有行  			sed -n -e 'p' passwd
		打印第一行和第三行    sed -n -e '1p;3p' passwd
		打印以b开头的行       sed -n -e '/^b/p' passwd
		打印以login结尾行     sed -n -e '/login$/p' passwd
	4.替换
		把每行找到的第一个a替换为bbb
			sed -e 's/a/bbb/' passwd
		把每行找到所有的b替换为admin
			sed -e 's/o/admin/g' passwd
		替换1-3行：为-
			sed -e '1,3s/:/-/g' passwd
	5.使用域的方式进行定位
		echo "03-23-2020" |awk -F "-" '{print $3"-"$2"-"$1}'
		echo "03-23-2020" | sed -r 's/(..)-(..)-(....)/\3-\1-\2/'
		echo "come on,baby" |sed -r 's/(.*),(.*)/\2,\1/'
		删除每行的第二个字符
		head -3 passwd | sed -r 's/(.)(.)(.*)/\1\3/'
		删除最后一个字符
		echo "can you see me?" |sed -r 's/(.*)(.)/\1/'

3.网络基础
	1.OSI参考模型(7层)
		物联网传话不要应用
		物理层      设备的比特流传输     			网卡
		数据链路层   mac地址进行媒介的访问        交换机(同网段IP进行通信) 
		网络层      提供逻辑寻址                 路由器(不同网段IP进行通信)
		传输层      提供可靠和不可靠的传输        TCP/UDP
		会话层      对应会话管理和同步            操作系统，应用读取
		表示层      数据的表现形式，加密等等       ASCII、JPEG
		应用层      数据接口                     http、telnet
	2.TCP/IP参考模型(4层)
		网络接口层(物理层、数据链路层)
		互联网层
		传输层
		引用层(应用、表示、会话)
	3.OSI和TCP/IP区别
		相同点
			都是以协议栈为基础
			彼此之间协议独立
			下层为上层 提供服务
		不同点
			OSI是先有模型，TCP/IP是先有协议后有模型
			OSI适用于各种协议，TCP/IP适用于TCP/IP网络
			层次数量不一样
	4.传输层协议
		TCP(传输控制协议)
			面向连接的服务
				建立连接，再传输数据，再断开
				数据再传输中不包含目的地址
				保证数据传输的可靠性
		UDP(用户数据报协议)
			面向无连接的服务
				不需要事先建立连接
				每个报文带有完整的目的地址
				不保证数据传输的可靠性
	5.tcp的连接3次握手和tcp断开的4次握手
		tcp连接3次握手
			1.主机a发送同步信号给主机b，我能和你通信么？
			2.主机b发送同意信号给主机a，同时发送同步信号给主机a，我可以和你通信么？
			3.主机a发送同意信号给主机b
		tcp断开连接的4次握手
			1.主机a发送信号给主机b，我要结束连接
			2.主机b发送给主机a，当然可以
			3.主机b发送信号给主机a，终止
			4.主机a发送信号给主机b，终止
	6.IP地址
		IP(网络间的协议)
		IP地址通常是32位的二进制数字，被分为4组8个二进制数字
		192.168.7.240          IP地址
		255.255.254.0          子网掩码(结合IP地址算网段)
		192.168.7.0            网络号(不能用)
		192.168.7.255          广播地址(不能用)
		IP地址类型
		A类：10.0.0.0-10.255.255.255
		B类:172.16.0.0-172.31.255.255
		C类:192.168.0.0-192.168.255.255
		IP地址的计算方法
		1.将IP地址、子网掩码转换为二进制
		2.将二进制进行与运算，得到网络的地址(2个1才是1)
		-------------------------------------------
		1100 0000 . 1010 1000 .0000 0111 .1111 0000
		1111 1111   1111 1111  1111 1110 .0000 0000
		-------------------------------------------
		1100 0000 . 1010 1000 .0000 0110 .0000 0000
		   192         168          6        0









